#!/usr/bin/env python3

# If you're reading this, know that I am not, have never been, nor shall ever
# be a frontend engineer. Being color blind means not giving two fucks about UI
# because, for the most part, no-one in UI gives two fucks about CD users, and
# it breeds a frustration with the entire topic. If you have a problem with the
# way it looks, feel free to express your ideas in the form of a pull request.

#TODO, major:
# * Stats: Get the percentiles/means charted. Figure out what the overview pane
# *        is going to look like and how it'll work.
# * UI zoom: Shouldn't be too hard.
# * Allow forcible resize of the columns.
# * Get the canvasas properly sized to their containers. The heuristic sucks ass.
# * Unless there's been a rebucketing, ONLY redraw the current epoch.
# * Smooth the transition between max_ttls when dropping one off the left side.
#   Basically, just smooth the 'animation' a bit? Pretty hard for low framerates.
#   Could redraw() be called every 100ms for a couple seconds?

#TODO, minor:
# * use icmp_seq * interval + rtt as timestamp for pongs?
# * WHAT IS CAUSING THE FALSE LOSS ABOUT 1S AFTER STARTUP?
# * Make events a proper type and translate the event dicts to the instances to
#   save on the hash lookup time.
# * disable line wrap on the "raw" div.
# * silence the exception when an auth fail occurs. Just log it or something.
# * Get the vertical graduations on the label canvas.
# * Get off of port 8000 and use a dynamically-selected port. (Start the server
#   w/o an explicit port and just advertize whatever port the server is given.)
# * Maybe an actual favicon.ico? Just pack it as a string?
# * Allow user to alter packet size. (-s argument)
# * I don't like organizing the endpoints by numeric index on the python side.
#   I'd rather that just be a UI-side thing, but this way, the command-line order
#   is preserved all the way through to the UI. As I said, I really don't like
#   it.  (Am I still doing this? 2/27/2025)
# * If one graph bumps over because it's appending, force an immediate redraw on
#   them all so they stay in vertical sync.
# * Add support for the zoom to just continuously show everything? Meh. Maybe.

import argparse
from http.server import BaseHTTPRequestHandler, ThreadingHTTPServer
import json
import math
import os
import re
import secrets
import select
import shutil
import subprocess
from threading import Thread
import time
from urllib.parse import urlparse, parse_qs
import webbrowser

MAX_ENDPOINTS = 5

parser = argparse.ArgumentParser(
  description='pingem [-i interval] endpoint [endpoint [endpoint...]]')
parser.add_argument('-i', '--interval', type=float, default=0.2, help='time (as a float) between pings')
parser.add_argument('endpoints', nargs='*',
                    help='IP name or address of target[s]',
                    default=['8.8.8.8'])
cl_args = parser.parse_args()
print(cl_args.endpoints)
print(cl_args)

#TODO: Do something sane if ping isn't found anywhere
ping = shutil.which('ping')
print('using ping binary at:' + ping)

#TODO: Replace the X with an "icon" (a couple lines on canvas.)
row_def = '''
<tr id=tr_raw{y} class=tr_raw>
  <td colspan=3>
    <button class=close_button>X</button> <div class='terminal cell' id=raw_pong{y}></div>
  </td>
</tr>
<tr id=tr_data{y}>
  <td id='graph_container_{y}_0' class='graph_container'>
    <canvas id='data_canvas_{y}_0' class='data_canvas'></canvas>
    <canvas id='label_canvas_{y}_0' class='label_canvas'></canvas>
    <canvas id='cursor_canvas_{y}_0' class='cursor_canvas'></canvas>
  </td>
  <td id='graph_container_{y}_1' class='graph_container'>
    <canvas id='data_canvas_{y}_1' class='data_canvas'></canvas>
    <canvas id='label_canvas_{y}_1' class='label_canvas'></canvas>
    <canvas id='cursor_canvas_{y}_1' class='cursor_canvas'></canvas>
  </td>
</tr>
'''


index = '''
<html>
<head>
<title>pingem v1.0e-20</title>
<style>
  body{background-color:black;color:white;overflow:hidden;}
  .terminal{ display:inline-block; font-family:monospace; font-size:12px;}
  .status_row{display:grid;grid-template-columns:24px 1fr 25%;}
  .graph_row{display:grid;grid-template-columns:35% 40% 25%;}
  .graph_container { position:relative; border:1px solid grey; padding:2px; }
  .graph_container > canvas { position:absolute; left:0; top:0; }
  .display_layout{cellpadding:0;border:1;}
  .data_canvas { z-index:0; }
  .label_canvas { z-index:1; }
  .cursor_canvas { z-index:2; }
  .close_button { display:inline-block; }
  #viewport_tracker {
    position:fixed; top:0; left:0; width:100vw; height:100vh;
    overflow:hidden; z-index:-1;
  }
</style>
</head>
<body>
<div id=viewport_tracker height:100vh width:100vw></div>
<table class=display_layout>
  ROWS
</table>
<script type='text/javascript' defer>
var beep_sound = new Audio('https://cdn.pixabay.com/audio/2022/03/10/audio_c07a9f33fd.mp3');
var already_beeped = false;

class Epoch {
  constructor(vertical_divisions, all_graph_max_rtt) {
    this.buckets = Array(vertical_divisions).fill(0);
    this.samples = [];
    this.sorted = true;
    this.count_pong = 0;
    this.count_loss = 0;
    this.count_all = 0;
    this.total_rtt = 0;
    this.vertical_divisions = vertical_divisions;
    this.all_graph_max_rtt = all_graph_max_rtt;
  }

  add(event) {
    this.count_all++;
    if(event['msg_type'] == 'pong') {
      this.count_pong++;
      this.total_rtt += event['rtt'];
      var bucket_id = Math.floor(this.buckets.length * event['rtt'] / (this.all_graph_max_rtt + 0.001));
      bucket_id = Math.min(bucket_id, this.vertical_divisions - 1);
      this.buckets[bucket_id]++;
      layout_manager.update_largest_known_bucket_count(this.buckets[bucket_id]);
      this.samples.push(event['rtt']);
      this.sorted = false;
    } else {
      this.count_loss++;
    }
  }

  get_buckets() {
    return this.buckets;
  }

  ensure_samples_sorted() {
    if(!this.sorted) {
      this.samples.sort();
      this.sorted = true;
    }
  }

  get_max_displayed_rtt() {
    this.ensure_samples_sorted();
    if(this.samples.length == 0) {
      return undefined;
    }
    return this.samples[this.samples.length - 1];
  }

  get_stats() {
    this.ensure_samples_sorted();

    if(this.count_all == 0) {
      return undefined;
    }

    // TODO: make the percentiles configurable.
    var avg = undefined;
    var _100 = undefined;
    var _90 = undefined;
    var _50 = undefined;
    var _10 = undefined;
    var _0 = undefined;
    var loss = 0;

    if(this.count_pong > 0) {
      avg = this.total_rtt / this.count_pong;
      _100 = this.buckets[this.buckets.length - 1];
      _90 = this.buckets[Math.floor(this.buckets.length * 0.9)];
      _50 = this.buckets[Math.floor(this.buckets.length * 0.5)];
      _10 = this.buckets[Math.floor(this.buckets.length * 0.1)];
      _0 = this.buckets[0];
    }
    if(this.count_loss > 0) {
      loss = this.count_loss / this.count_all;
    }

    return [loss, avg, _100, _90, _50, _10, _0];
  }
}

class View {
  constructor(events, start_timestamp, end_timestamp, appending, num_displayed_epochs,
              vertical_divisions, max_rtt) {
    this.epochs = [];
    this.num_displayed_epochs = num_displayed_epochs;
    this.rebucket = true;
    this.timespan = end_timestamp - start_timestamp;
    this.start_timestamp = start_timestamp;
    this.end_timestamp = end_timestamp;
    this.appending = true;
    this.vertical_divisions = vertical_divisions;
    this.all_graph_max_rtt = max_rtt;

    //TODO: rewrite this to binary search for the first and last icmp_seqs.
    for(var icmp_seq=0; icmp_seq < events.length; icmp_seq++) {
      if(events[icmp_seq]) {
        if(events[icmp_seq]['timestamp'] > start_timestamp &&
           events[icmp_seq]['timestamp'] < end_timestamp) {
          this.add(events[icmp_seq]);
        }
      }
    }
  }

  add(event) {
    if(!this.appending && event['timestamp'] >= this.end_timestamp) {
      return;
    }

    var epoch_id =
      Math.floor(this.num_displayed_epochs * (event['timestamp'] - this.start_timestamp) / this.timespan);
    if(epoch_id >= this.num_displayed_epochs && this.appending) {
      layout_manager.left_shift(this.num_displayed_epochs, event['timestamp']);

      // This event will be queued in the rebucketed View that is about to be created.
      return;
    }

    if(!this.epochs[epoch_id]) {
      this.epochs[epoch_id] = new Epoch(this.vertical_divisions, this.all_graph_max_rtt);
    }
    this.epochs[epoch_id].add(event);
  }

  get_buckets(epoch_id) {
    if(!this.epochs[epoch_id]) {
      return undefined;
    }
    return this.epochs[epoch_id].get_buckets();
  }

  get_stats(epoch_id) {
    if(!this.epochs[epoch_id]) {
      return undefined;
    }
    return this.epochs[epoch_id].get_stats();
  }

  get_max_displayed_rtt() {
    var this_graph_max_rtt = 0;
    //TODO: can this be const, given that the call forces a sort? (This is just a shortcoming of my
    //      lack of JS experience.
    for(var epoch of this.epochs) {
      // There are times (like your machine is sleeping, or JS at breakpoint) that this can happen:
      if(epoch) {
        const epoch_max_displayed_rtt = epoch.get_max_displayed_rtt();
        if(epoch_max_displayed_rtt != undefined) {
          //This catches a rare case where the most recent epoch has only a losses in it.
          this_graph_max_rtt = Math.max(this_graph_max_rtt, epoch_max_displayed_rtt);
        }
      }
    }

    return this_graph_max_rtt;
  }
}

class Graph {
  constructor(row_index, col_index) {
    this.events = [];
    this.prev_max_rtt = 1;
    this.newest_timestamp = 0.0;
    this.first_active_event = 0;
    this.data_canvas = document.getElementById('data_canvas_'+row_index+'_'+col_index);
    this.label_canvas = document.getElementById('label_canvas_'+row_index+'_'+col_index);
    this.cursor_canvas = document.getElementById('cursor_canvas_'+row_index+'_'+col_index);
    this.data_context = this.data_canvas.getContext('2d');
    this.label_context = this.label_canvas.getContext('2d');
    this.cursor_context = this.cursor_canvas.getContext('2d');
    this.graph_container = document.getElementById('graph_container_'+row_index+'_'+col_index);

    this.rebucket_required = true;

    // I've chosen to have the pixel dimensions attached to individual graphs
    // instead of to the layout manager because I may choose to have the heights
    // independently resizeable.
    this.epoch_pixel_width = 7;
    this.epoch_pixel_width_center = Math.floor(this.epoch_pixel_width / 2) + 1;
    this.bucket_pixel_height = 5;
    this.bucket_pixel_height_center = Math.floor(this.bucket_pixel_height_center / 2) + 1;
    this.inset_width = 0;
    this.inset_height = 0;
    this.vertical_label_divisions = 5.0;
  }

  set_geometry(width, height) {
    this.width = width;
    this.height = height;

    for(var canvas of [this.data_canvas, this.label_canvas, this.cursor_canvas]) {
      canvas.style.width = this.width;
      canvas.style.height = this.height;
      canvas.width = this.width;
      canvas.height = this.height;
    }

    this.graph_container.width = this.width
      - 5 /* I've no idea why this is necessary */
      ;
    this.graph_container.height = this.height
      + 2 /* I've no idea why this is necessary */
      ;

    this.num_displayed_epochs = Math.floor(this.graph_container.width / this.epoch_pixel_width);
    var new_inset_width = this.num_displayed_epochs * this.epoch_pixel_width;
    this.buckets_per_epoch = Math.floor(this.graph_container.height / this.bucket_pixel_height);
    var new_inset_height = this.buckets_per_epoch * this.bucket_pixel_height;

    this.left_offset = Math.floor((this.graph_container.width - new_inset_width)/2);
    this.top_offset = Math.floor((this.graph_container.height - new_inset_height)/2);

    if(new_inset_width != this.inset_width || new_inset_height != this.inset_height) {
      this.inset_width = new_inset_width;
      this.inset_height = new_inset_height;
      this.schedule_rebucket();
    }
  }

  add(event) {
    let icmp_seq = event['icmp_seq'];
    this.newest_timestamp = Math.max(event['timestamp'], this.newest_timestamp);

    //There are a few situations we have to deal with here. First, what happens if the 'expected'
    //packet comes first, then the thing actually arrives? Frankly, this should be a TODO:, to
    //make the behavior of ultra-late, post-timeout packets configurable. The default (what is
    //implemented here) is that once a packet's timeout has elapsed, it's lost even if it arrives.

    // If the event already exists, either the actual packet arrived first and we should throw out
    // the timeout packet we just received, or the timeout packet already arrived and we're
    // receiving the (very late) pong from the echo endpoint. In this case, it's timed out ands
    // dropped.
    if(this.events[icmp_seq]) {
      //There are two ways for this to happen. Either the packet arrived after our timeout limit,
      //or the backend reported an 'expected' event after it had already delivered us a 'pong.'
      //Either way, it would be weird.
    } else {
      this.events[icmp_seq] = event;

      //Make sure this.view is valid and properly scaled:
      this.rebucket_if_necessary();
      this.view.add(event);
    }

    this.redraw();
  }

  schedule_rebucket() {
    this.rebucket_required = true;
  }

  draw_line(x0, y0, x1, y1, width, color) {
    this.data_context.lineWidth = width;
    this.data_context.strokeStyle = color;
    this.data_context.beginPath();
    this.data_context.moveTo(x0, y0);
    this.data_context.lineTo(x1, y1);
    this.data_context.stroke();
  }

  rebucket_if_necessary() {
    if(this.rebucket_required || !this.view) {
      console.log('Graph is rebucketing...');
      const max_rtt = layout_manager.get_max_displayed_rtt();
      const [start_timestamp, end_timestamp, append] = layout_manager.get_zoom();
      this.view = new View(this.events, start_timestamp, end_timestamp, append,
                           this.num_displayed_epochs, this.buckets_per_epoch, 
                           max_rtt);

      this.rebucket_required = false;
    }
  }

  redraw() {
    console.log('redraw()');
    const max_rtt = layout_manager.get_max_displayed_rtt();
    if(max_rtt != this.prev_max_rtt) {
      this.schedule_rebucket();
    }
    this.prev_max_rtt = max_rtt;

    this.rebucket_if_necessary();
    console.log('redraw(), post-rebucketing');

    const largest_known_bucket_count = layout_manager.get_largest_known_bucket_count();

    let width = this.data_canvas.width;
    let height = this.data_canvas.height;

    this.data_context.clearRect(0, 0, width, height); // TODO: not really necessary?
    this.data_context.globalCompositeOperation='source_over';

    for(var epoch_id=0; epoch_id<this.num_displayed_epochs; epoch_id++) {
      const buckets = this.view.get_buckets(epoch_id);
      if(buckets != undefined) {
        var x =
            this.left_offset + (epoch_id * this.epoch_pixel_width) + this.epoch_pixel_width_center;
        var y0 = 0;
        var y1 = this.bucket_pixel_height;
        this.data_context.moveTo(x, 0);
        for(var bucket_id=buckets.length-1; bucket_id >= 0; bucket_id--) {
          if(buckets[bucket_id]) {
            var intensity = Math.min(1.0, (buckets[bucket_id]-1) / (largest_known_bucket_count-1));
            intensity = intensity * 0.70 + 0.30;
            var blue = intensity * 255.0;
            var red_green = intensity * blue;

            var color = `rgb(${red_green},${red_green},${blue})`;
            if(buckets[bucket_id] == largest_known_bucket_count) {
              color = `rgb(255,0,0)`;
            }
            this.draw_line(x, y0, x, y1, this.epoch_pixel_width, color);
          }
          y0 += this.bucket_pixel_height;
          y1 += this.bucket_pixel_height;
        }

        const stats = this.view.get_stats(epoch_id);
        if(!stats) {
          debugger;
        }
        const [loss, avg, _100, _90, _50, _10, _0] = stats;
        if(loss) {
          if(loss > 0.9) {
            // This is only here to help debug the issue with losses getting ahead of arrivals.
            beep_sound.play();
            // debugger;
          }
          var loss_y0 = this.inset_height + this.top_offset; // TODO: -1?
          var loss_y1 = loss_y0 - loss * this.inset_height;
          this.draw_line(x, loss_y0, x, loss_y1, 1, '#40a040');
        }
      }
    }

    this.draw_labels(max_rtt);
  }

  draw_labels(max_rtt) {
    let width = this.data_canvas.width;
    let height = this.data_canvas.height;

    this.label_context.clearRect(0, 0, width, height);
    this.label_context.lineWidth = 1;
    this.label_context.strokeStyle= '#ff606050';
    this.label_context.fillStyle= '#ff6060ff';
    this.data_context.globalCompositeOperation='source-over';
    this.label_context.beginPath();
    this.label_context.font = '15px courier new';
    this.label_context.textBaseline = 'top';
    var inc = 1.0/this.vertical_label_divisions;
    for(var k=0.0; k<1.0-(inc/2.0); k+=inc) {
      var y = Math.floor(k*height);
      this.label_context.textAlign = 'left';
      this.label_context.fillText('' + ((1-k)*max_rtt).toFixed(1) + 'ms', 0, y+1);
      this.label_context.textAlign = 'right';
      this.label_context.fillText('' + ((1-k)*100).toFixed(1) + '%', width-1, y+1);
      if(k>0.0) {
        this.label_context.moveTo(0, y);
        this.label_context.lineTo(width-1, y);
      }
    }
    this.label_context.stroke();

  }

  get_max_displayed_rtt() {
    if(!this.view) {
      return 0;
    } else {
      return this.view.get_max_displayed_rtt();
    }
  }
}

class LayoutManager {
  constructor() {
    // TODO: get off the hashes
    // Just a map of row index to the command-line endpoint name:
    this.endpoints = {}

    // A 2D map keyed first on row index, then a list of 2 graphs.
    this.graphs = {}

    const resizeObserver = new ResizeObserver(entries => {
      layout_manager.on_resize();
      //TODO: Trigger a redraw of everything that hasn't been drawn in the last 500ms.
    });
    resizeObserver.observe(document.getElementById('viewport_tracker'));

    this.width = window.innerWidth;
    this.height = window.innerHeight;

    this.set_zoom(0, 60*5, true);
  }

  set_zoom(start_timestamp, end_timestamp, appending) {
    this.start_timestamp = start_timestamp;
    this.end_timestamp = end_timestamp;
    this.appending = appending;

    this.schedule_rebucket();
  }

  schedule_rebucket() {
    for(const [graph_index, graph] of Object.entries(this.graphs)) {
      graph[0].schedule_rebucket();
    }

    this.largest_known_bucket_count = 1;
  }

  update_largest_known_bucket_count(current_bucket_count) {
    this.largest_known_bucket_count =
      Math.max(this.largest_known_bucket_count, current_bucket_count);
  }

  get_largest_known_bucket_count(current_bucket_count) {
    return this.largest_known_bucket_count;
  }

  left_shift(num_epochs_displayed, event_timestamp) {
    const epoch_timespan = (this.end_timestamp - this.start_timestamp) / num_epochs_displayed;

    const num_epochs_to_skip = Math.ceil((event_timestamp - this.end_timestamp) / epoch_timespan);

    this.end_timestamp += epoch_timespan * num_epochs_to_skip;
    this.start_timestamp += epoch_timespan * num_epochs_to_skip;

    this.schedule_rebucket();
  }

  get_zoom() {
    return [this.start_timestamp, this.end_timestamp, this.appending];
  }

  get_max_displayed_rtt() {
    var max_rtt = 0.0;
    for(const [key, [longspan, unused]] of Object.entries(this.graphs)) {
      max_rtt = Math.max(max_rtt, longspan.get_max_displayed_rtt());
    }

    return max_rtt;
  }

  get_row_count() {
    return Object.keys(this.graphs).length;
  }

  on_resize() {
    this.width = window.innerWidth;
    this.height = window.innerHeight;

    var num_rows = this.get_row_count();
    if(num_rows == 0) {
      //This happens right at the beginning, when the window opens.
      return;
    }

    /* TODO: better heuristics for the height of "stuff." */
    var inner_height = this.height
      - 14 /* room for top and bottom borders. TODO: remove magic numbers */
      ;
    this.row_height = Math.floor(this.height / num_rows)
      - 5 * 2 /* room for borders between rows and between raw pongs and graphs */
      ;
    this.pong_height = 26; /* TODO: needs to be dependent upon height of text, border thickness. */
    this.data_height = this.row_height - this.pong_height;

    var inner_width = this.width
      -10 /* rooom for left and right borders. TODO: remove magic numbers */
      ;
    this.data_width = (inner_width / 3 ) /* Three columns. TODO: magic number. */
      - 5 /* room for borders between columns */
      ;

    console.log('setting geometries to ' + this.data_width + ',' + this.data_height);
    for(var index of Object.keys(this.graphs)) {
      if(this.graphs[index] != undefined) {
        /* TODO: how to handle the second column? It's not going to be a Graph type. */
        this.graphs[index][0].set_geometry(this.data_width*2, this.data_height);
      }
    }

    this.schedule_rebucket();
  }

  activate_row(index) {
    console.log('activating row ' + index);
    document.getElementById('tr_raw'+index).style.display = 'table-row';
    document.getElementById('tr_data'+index).style.display = 'table-row';

    if(this.graphs[index] == undefined) {
      this.graphs[index] = [
          new Graph(index, 0),
          undefined];
    }
  }

  deactivate_row(index) {
    console.log('deactivating row ' + index);
    document.getElementById('tr_raw'+index).style.display = 'none';
    document.getElementById('tr_data'+index).style.display = 'none';

    delete(this.graphs[index]);
  }

  handle_endpoints_list(data) {
    console.log('endpoint_list received:', data)
    this.endpoints = {};

    for(let index=0; index<MAX_ENDPOINTS; index++) {
      if(data.endpoints[index]) {
        this.activate_row(index);
        this.endpoints[index] = data.endpoints[index];
      } else {
        this.deactivate_row(index);
      }
    }

    this.on_resize();
    console.log('endpoints:');
    console.log(this.endpoints);
  }

  handle_message(event) {
    if(event.msg_type == 'endpoints') {
      this.handle_endpoints_list(event);
      return;
    }

    let message = '';
    if(event.msg_type == 'expected') {
      message = 'Lost icmp_seq:' + event['icmp_seq'];
    } else if(event.msg_type == 'pong') {
      message = event['raw'];
      //TODO: set event['raw'] to undefined to save the space. I'm leaving it for now for
      // debugging reasons.
    }
    document.getElementById('raw_pong'+event.index).textContent = 
      '[' + this.endpoints[event['index']] + ']  ' + message;

    this.graphs[event['index']][0].add(event);
  }
}

/*TODO: this doesn't really need to be a class.*/
class DataRelay {
  constructor() {
    const stream_url = '/stream/?secret='+SECRET;
    this.event_source = new EventSource(stream_url);
    this.event_source.onmessage = (event) => {
      const json_data=event.data;
      const data = JSON.parse(json_data);
      layout_manager.handle_message(data);
    };
    this.event_source.onerror = (error) => {
      console.error('event_source.onerror:', error);
    };
    console.log('data stream handler is set up');
  }
}

let data_relay = new DataRelay();
let layout_manager = new LayoutManager();

</script>
</body>
'''

secret = secrets.randbelow(1000000000000000)
print('using secret', secret)

def start_browser():
  # give the server a moment to start up. I've never seen this to be necessary,
  # but you never know.
  time.sleep(1.0)
  webbrowser.open(f'http://127.0.0.1:8000?secret={secret}', new=0)

def encode_as_wire_message(data):
  json_encoded = json.dumps(data)
  return bytes('data: ' + json_encoded + '\n\n', 'utf8')

class Endpoint():
  successful_response_regex = re.compile(
    r'from ([^:]*):.*seq=(\d*) ttl=(\d*) time=([0-9.]*) ms')

  def __init__(self, endpoint_name, endpoint_index, interval):
    self.endpoint_name = endpoint_name
    self.endpoint_index = endpoint_index
    self.start_time = time.time()
    self.reported = {}
    self.oldest_reported = 0

    self.subproc = subprocess.Popen(
      [ping, '-i', str(cl_args.interval), self.endpoint_name],
      stdout=subprocess.PIPE, stderr=subprocess.STDOUT)

  #TODO: gets only one. Any way to do better without re-calling select?
  def get_pong(self):
    line = self.subproc.stdout.readline().decode().strip()

    #TODO: detect 'Name or service not known' and deliver an error to the user?
    if 'bytes of data' in line:
      return None
    else:
      match = re.search(self.successful_response_regex, line)
      if not match:
        print(f'NONMATCHING LINE {self.endpoint_name}:', line)
      else:
        icmp_seq = self.get_wide_icmp_seq(int(match.group(2)))
        if not self.needs_reporting(icmp_seq):
          print(f'ICMP_SEQ {icmp_seq} already reported')
        else:
          data = {
            'icmp_seq':  icmp_seq,
            'msg_type':  'pong',
            'responder': match.group(1),
            'ttl':       int(match.group(3)),
            'rtt':       float(match.group(4)),
            'raw':       line,
            'index':     self.endpoint_index,
            'timestamp': time.time() - self.start_time
          }
          print(self.endpoint_name, icmp_seq, data['timestamp'], line)

          return encode_as_wire_message(data)

  def get_losses(self):
    losses = []

    elapsed_time = time.time() - self.start_time
    icmp_seq = self.oldest_reported + 1

    #TODO: make user configurable?
    timeout_time = 3.0

    while icmp_seq * cl_args.interval < elapsed_time - timeout_time:
      if self.needs_reporting(icmp_seq):
        data = {
          'msg_type':  'expected',
          'icmp_seq':  icmp_seq,
          'index':     self.endpoint_index,
          'timestamp': icmp_seq * cl_args.interval
        }
        losses.append(encode_as_wire_message(data))
        print('lost:', data)
      icmp_seq += 1

    return losses

  def get_wide_icmp_seq(self, narrow):
    now = time.time()
    elapsed = now - self.start_time
    #Compute how many 65k runs we should expect to have completed:
    runs = elapsed/(65536.0 * cl_args.interval)
    runs_fract, runs_floor = math.modf(runs)
    runs_floor = int(runs_floor)

    if runs_fract >= 0.8 and narrow < 32768:
        return narrow + (65536 * runs_floor + 1)
    elif runs_fract < 0.2 and narrow > 32768:
        return narrow + (65536 * runs_floor - 1)
    else:
      return narrow + 65536 * runs_floor

  # returns True if this icmp_seq has never been reported before, False otherwise
  def needs_reporting(self, icmp_seq):
    # delete all the records of reported packets that we don't need anymore.
    while self.oldest_reported in self.reported:
      del(self.reported[self.oldest_reported])
      self.oldest_reported += 1

    if icmp_seq <= self.oldest_reported or icmp_seq in self.reported:
      return False

    self.reported[icmp_seq] = True

    return True

class PingManager():
  def __init__(self, endpoint_names):
    self.interval = cl_args.interval

    # We use a dict here because we want to be able to delete an entry without
    # the ide of later entries changing:
    self.endpoints = {}
    for endpoint_name in endpoint_names:
      self.add_endpoint(endpoint_name)

  def add_endpoint(self, endpoint_name):
    endpoint_index = None
    for index in range(MAX_ENDPOINTS):
      if index not in self.endpoints:
        endpoint_index = index
        break

    if endpoint_index is None:
      raise "Too many endpoints requested"

    print('ENDPOINT BEING ADDED: ' + endpoint_name)
    self.endpoints[endpoint_index] = Endpoint(endpoint_name, endpoint_index, cl_args.interval)

  def get_events(self):
    events = []
    fds = []
    fds_to_endpoints = {}

    for endpoint_index, endpoint in self.endpoints.items():
      fds.append(endpoint.subproc.stdout)
      fds_to_endpoints[endpoint.subproc.stdout] = endpoint

    ready_fds, _, _ = select.select(fds, [], [], 0.1)

    for fd in ready_fds:
      pong = fds_to_endpoints[fd].get_pong()
      if pong:
        events.append(pong)

    for endpoint_index, endpoint in self.endpoints.items():
      events += endpoint.get_losses()

    return events

  def get_endpoint_names(self):
    return {k:v.endpoint_name for k,v in self.endpoints.items()}

#TODO: Get this constant in the class
class RequestHandler(BaseHTTPRequestHandler):
  def check_secret(self):
    # TODO: get the secret out of the url so it can't be shoulder-surfed. This isn't a sufficiently
    #       critical app to do any real user auth. If the user started the app, that's good enough.
    self.parsed_url = urlparse(self.path)
    self.query_params = parse_qs(self.parsed_url.query)

    if ('secret' not in self.query_params or
        type(self.query_params['secret']) != list or
        int(self.query_params['secret'][0]) != secret):
      return False
    return True

  def add_misc_headers(self, content_type):
    self.send_header('Content-type', content_type)
    self.send_header('Cache-Control', 'no-cache')
    self.send_header('Connection', 'keep-alive')
    self.send_header('Access-Control-Allow-Credentials', 'true')
    self.send_header('Access-Control-Allow-Origin', '*')

  def serve_index(self):
    self.send_response(200)
    self.add_misc_headers('text/html')
    self.end_headers()

    # TODO: Better (django-like?) interpolation? 
    # TODO: I can't use .format w/ index because it freaks out every time it
    # sees a {, which javascript and css kick in all the time. I don't want to
    # have to use \{ every time.....
    rows = ''
    for row_id in range(MAX_ENDPOINTS):
      rows += row_def.format(y=row_id)
    hydrated_index = index.replace('SECRET', str(secret))
    hydrated_index = hydrated_index.replace('ROWS', rows)
    hydrated_index = hydrated_index.replace('MAX_ENDPOINTS', str(MAX_ENDPOINTS))
    encoded_index = bytes(hydrated_index, 'utf8')
    self.send_header('Content-Length', len(encoded_index))
    self.wfile.write(encoded_index)

  def send_endpoint_update(self):
    data = {}
    data['msg_type'] = 'endpoints'
    data['endpoints'] = self.ping_manager.get_endpoint_names()
    print('Sending endpoint update: ', data)
    self.wfile.write(encode_as_wire_message(data))

  def serve_stream(self):
    self.send_response(200)
    self.add_misc_headers('text/event-stream')
    self.end_headers()

    print('Beginning to serve stream...')

    self.ping_manager = PingManager(cl_args.endpoints)
    self.send_endpoint_update()

    while(True):
      for event in self.ping_manager.get_events():
        self.wfile.write(event)
        #TODO: "I/O operation on a closed file" after machine sleeps.
        self.wfile.flush()

  def do_GET(self):
    if('favicon.ico' in self.path):
      self.send_error(404, "Resource not found")
    else:
      if(not self.check_secret()):
        #print('failed to authorize:' + self.path)
        pass
      else:
        if(self.parsed_url.path == '/'):
          self.serve_index()
          self.finish()
        elif(self.parsed_url.path == '/stream/'):
          self.serve_stream()
      self.connection.close()

def run(server_class=ThreadingHTTPServer, handler_class=RequestHandler):
  #TODO: allow the port number to be dynamically assigned.
  server_address = ('', 8000) # serve on all interfaces, port 80
  httpd = server_class(server_address, handler_class)
  t = Thread(target=start_browser)
  t.run()
  print('starting httpd...')
  httpd.serve_forever()


run()
print('after run')
