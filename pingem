#!/usr/bin/env python3

# If you're reading this, know that I am not, have never been, nor shall ever
# be a frontend engineer. Being color blind means not giving two fucks about UI
# because, for the most part, no-one in UI gives two fucks about CD users, and
# it breeds a frustration with the entire topic. If you have a problem with the
# way it looks, feel free to express your ideas in the form of a pull request.

#TODO:
# * Get off of port 8000 and use a dynamically-selected port. (Start the server
#   w/o an explicit port and just advertize whatever port the server is given.)
# * Maybe an actual favicon.ico? Just pack it as a string?
# * Allow user to alter packet size. (-s argument) Maybe have multiple sizes in
#   same line? I'm not sure how that graph would look.

import argparse
from http.server import BaseHTTPRequestHandler, ThreadingHTTPServer
import json
import math
import re
import secrets
import select
import shutil
from subprocess import Popen, PIPE
from threading import Thread
import time
from urllib.parse import urlparse, parse_qs
import webbrowser

parser = argparse.ArgumentParser(
  description='pingem [-i interval] endpoint [endpoint [endpoint...]]')
parser.add_argument('-i', '--interval', help='time (as a float) between pings')
parser.add_argument('endpoints', nargs='*',
                    help='IP name or address of target[s]',
                    default=['8.8.8.8'])
cl_args = parser.parse_args()
print(cl_args.endpoints)
print(cl_args)

#TODO: Do something sane if ping isn't found anywhere
ping = shutil.which('ping')
print('using ping binary at:' + ping)

#TODO: I'd like to be able to accomplish this by using cloneNode, but if I clone
#      an entire row of a table, the ids of the individual cells aren't unique
#      and are therefore a pain in the ass to locate. This way, I can get them
#      with getElementById. There's probably a better way.
#TODO: Replace the X with an "icon" (a couple lines on canvas.)
row_def = '''
<tr id=row{y}>
<td id=longspan{y} border=0>longspan{y}</td>
<td id=shortspan{y}>shortspan{y}</td>
<td width=1% valign=top>
  <button id=halt{y} onclick='halt({y});'>X</button>
</td>
<td id=detail{y} rowspan=2>detail{y}</td>
</tr>
<tr id=raw_ping_row{y} height=40px>
<td colspan=3 id=raw_ping{y} class='terminal'>raw_ping{y}</td>
</tr>
'''

index = '''
<html>
<head>
<title>pingem v1.0e-20</title>
<style>
  #overlayCanvas{
    position:fixed;top:0;left:0;bottom:0;right:0;z-index:10;pointerevents:'none';}
  body{background-color:black;color:white;overflow:hidden;}
  tr{border-right:0px;border-left:0px;border-top:0px;}
  .terminal{font-family:monospace;}
</style>
</head>
<body>
<canvas id='overlayCanvas'></canvas>
<table id='layout' width=100% height=100% border=1 cellspacing=0 cellpadding=0>
<tr height=0%>
  <td colspan=3>
    <input id=endpoint value='add endpoint'>
    <button onclick='add_endpoint();'>Add!</button>
  </td>
</tr>
ROWS
</table>
<script type='text/javascript' defer>
class RowManager {
  constructor() {
    self.endpoints = {}
  }

  activate_row(index) {
    console.log('activating row ' + index);
    document.getElementById('row'+index).style.display = undefined;
    document.getElementById('raw_ping_row'+index).style.display = undefined;
  }

  deactivate_row(index) {
    console.log('deactivating row ' + index);
    document.getElementById('row'+index).style.display = 'none';
    document.getElementById('raw_ping_row'+index).style.display = 'none';
  }

  handle_endpoints_list(data) {
    console.log('endpoint_list', data)
    for(let index=0; index<5; index++) {
      if(data.endpoints[index]) {
        this.activate_row(index);
      } else {
        this.deactivate_row(index);
      }
    }

    this.on_resize();
  }

  on_resize() {
    // Each graph needs updates on its geometry and needs a redraw.
  }

  handle_message(data) {
    if(data.msg_type == 'endpoints') {
      this.handle_endpoints_list(data);
    } else {
      console.log('incoming pong:')
      document.getElementById('raw_ping'+data.index).textContent=data['raw'];
    }
  }
}

class Span {
  constructor() {
    this.rtts = [];
    this.lost = 0;
    this.total_rtt_time = 0.0;
    this.dirty = true;
  }

  push(event) {
    this.events[event.icmp_seq] = event;
    this.dirty = true;
    this.total += 1;
    if(event['event_type'] == 'pong') {
      this.total_rtt_time += event['rtt']);
    } else {
      this.lost += 1;
    }
  }

  get_stats() {
    if(this.dirty) {
      this.stats = new Object();
      this.rtts.sort(function(a,b) { return a-b;}); // REALLY, Javascript? Fuck you.
      stats.rtts = this.rtts;
    }
  }
}

class EventBuffer {
  constructor(span_width) {
    this.events = {};
    this.spans = {};
    this.span_width = span_width;
    this.last_span_width = -1;
    //TODO: keep a list of dirty spans so you don't have to iterate over the whole thing every time.
  }

  get_span_id(timpstamp) {
    Math.floor(timestamp, this.span_width);
  }

  append(event) {
    icmp_seq = event['icmp_seq'];
    if(event['msg_type'] == 'expected') {
      this.events[icmp_seq] |= event;
    } else {
      this.events[icmp_seq] = event;
    }
    this.event[icmp_seq]['raw'] = undefined;

    span_id = get_span_id(event['timestamp']);
    this.spans[span_id] |= new Span();
    this.spans[span_id].push(event);

    //On the chance that a packet arrived in the current frame after it had been timed out in the
    //previous frame:
    if(this.spans[span_id-1]) {
      this.spans[span_id-1].dirty = true;
    }
  }

  rebuild_spans() {
    this.spans = {}

    span_start_time = 0.0;
    span_end_time = this.span_width;
    for(const event of this.events) {
      span_id = get_span_id(event['timestamp']);
      this.spans[span_id] |= new Span();
      this.spans[span_id].push(event);
    }
  }

  change_span_width(span_width) {
    this.span_width = span_width;
    rebuild_spans();
  }

}

class Graph {
  constructor(canvas_name, event_buffer) {
    this.canvas = document.getElementById(canvas_name);
    this.context = this.canvas.getContext('2d');
    this.event_buffer = event_buffer;
    this.last_width = 0;
    this.last_height = 0;
  }

  redraw() {
  }
}

class OverlayManager {
  constructor() {
    this.canvas = document.getElementById('overlayCanvas');
    this.context = this.canvas.getContext('2d');

    console.log('OverlayManager.canvas:', this.canvas);
    this.canvas.width = window.innerWidth;
    this.canvas.height = window.innerHeight;
    this.cursor_width = 75;

    this.last_cursor_x = 0;
    this.last_cursor_width = this.cursor_width;

    this.canvas.addEventListener('wheel', (event) => {
      event.preventDefault();
      this.cursor_width -= event.deltaY/120;
      if(this.cursor_width < 1) {
        this.cursor_width = 1;
      }
      this.draw_cursor(this.last_cursor_x);
    });

    this.canvas.addEventListener('mousemove', (event) => {
      this.draw_cursor(event.clientX);
    });
  }

  draw_cursor(x) {
    this.context.clearRect(
      this.last_cursor_x - this.last_cursor_width/2 - 1, 0,
      this.last_cursor_width + 2, this.canvas.height);

    this.context.beginPath();
    this.context.lineWidth = this.cursor_width
    this.context.strokeStyle = '#0000ff80';
    this.context.moveTo(x, 0);
    this.context.lineTo(x, this.canvas.height-1);
    this.context.stroke();

    this.context.beginPath();
    this.context.lineWidth = 1;
    this.context.strokeStyle = 'red';
    this.context.moveTo(x, 0);
    this.context.lineTo(x, this.canvas.height-1);
    this.context.stroke();

    this.last_cursor_x = x;
    this.last_cursor_width = this.cursor_width;
  }
}

class DataRelay {
  constructor() {
    console.log('constructor called');
    const stream_url = '/stream/?secret='+SECRET;
    this.name = 'foo';
    this.event_source = new EventSource(stream_url);
    this.event_source.onmessage = (event) => {
      const json_data=event.data;
      const data = JSON.parse(json_data);
      rowManager.handle_message(data);
    };
    this.event_source.onerror = (error) => {
      console.error('event_source.onerror:', error);
    };
    console.log('handler is supposedly set up');
  }
}

let dataRelay = new DataRelay();
let rowManager = new RowManager();
let overlayManager = new OverlayManager();

</script>
</body>
'''

secret = secrets.randbelow(1000000000000000)
#TODO: temporarily overridden for debugging
secret = 1
print('using secret', secret);

def start_browser():
  # give the server a moment to start up. I've never seen this to be necessary,
  # but you never know.
  time.sleep(1.0)
  webbrowser.open(f'http://127.0.0.1:8000?secret={secret}', new=0)

def encode_as_wire_message(data):
  json_encoded = json.dumps(data)
  return bytes('data: ' + json_encoded + '\n\n', 'utf8')

class PingManager():
  def __init__(self, endpoint_names):
    self.successful_response_regex = re.compile(
      r'from ([^:]*):.*seq=(\d*) ttl=(\d*) time=([0-9.]*) ms')

    self.interval = 1.0
    if cl_args.interval:
      self.interval = cl_args.interval

    # We use a dict here because we want to be able to delete an entry without
    # the ide of later entries changing:
    self.endpoints = {};
    for endpoint_name in endpoint_names:
      self.add_endpoint(endpoint_name)


  def add_endpoint(self, endpoint_name):
    #TODO: at startup, work out the location of ping binary
    endpoint_index = None
    for index in range(5):
      if index not in self.endpoints:
        endpoint_index = index
        break

    if endpoint_index is None:
      raise "Too many endpoints requested"

    print('ENDPOINT BEING ADDED: ' + endpoint_name)
    self.endpoints[endpoint_index] = {'endpoint_name': endpoint_name}
    self.endpoints[endpoint_index]['subprocess'] = (
      Popen([ping, '-i', str(self.interval), endpoint_name], stderr=PIPE, stdout=PIPE))
    now = time.time()
    self.endpoints[endpoint_index]['start_time'] = now
    self.endpoints[endpoint_index]['last_loss_check_time'] = now

  def get_wide_icmp_seq(self, narrow, endpoint_index):
    now = time.time()
    elapsed = now - self.endpoints[endpoint_index]['start_time']
    #Compute how many 65k runs we should expect to have completed:
    runs = (65536.0 * self.interval)/(elapsed)
    runs_fract, runs_floor = math.modf(runs)
    runs_floor = int(runs_floor)

    if runs_fract >= 0.8:
      if narrow < 32768:
        return narrow + (65536 * runs_floor + 1)
    elif runs_fract < 0.2:
      if narrow > 32768:
        return narrow + (65536 * runs_floor - 1)
    else:
      return narrow + 65536 * runs_floor

  def get_expected_events(self, endpoint_index):
    events = []

    last_time = self.endpoints[endpoint_index]['last_loss_check_time']
    now = time.time()
    time_to_check = now
    while time_to_check > last_time:
      elapsed_time = time_to_check - self.endpoints[endpoint_index]['start_time']

      #TODO: Make the timeout time user-configurable.
      icmp_seq = int((elapsed_time - 3.0)/self.interval)
      if (icmp_seq >= 0):
        data = {'msg_type':'expected'}
        data['icmp_seq'] = icmp_seq
        data['index'] = endpoint_index
        data['timestamp'] = time.time() - self.endpoints[endpoint_index]['start_time']
        print('expected icmp_seq:', data)
        events.append(encode_as_wire_message(data))

      time_to_check -= self.interval

    self.endpoints[endpoint_index]['last_loss_check_time'] = now

    return events

  def get_events(self):
    events = []
    for endpoint_index, endpoint_data in self.endpoints.items():
      events += self.get_expected_events(endpoint_index)

      stdouts = [endpoint_data['subprocess'].stdout]

      readable_stdouts, _, _ = select.select(stdouts, [], [])
      for stdout in readable_stdouts:
        print(endpoint_index, end='', flush=True)
        line = stdout.readline().decode().strip()
        match = re.search(self.successful_response_regex, line)
        if match:
          data = {}
          data['msg_type'] = 'pong'
          data['responder'] = match.group(1)
          icmp_seq = self.get_wide_icmp_seq(int(match.group(2)), endpoint_index)
          data['icmp_seq'] = icmp_seq
          data['ttl'] = int(match.group(3))
          data['rtt'] = float(match.group(4))
          data['raw'] = line
          data['index'] = endpoint_index
          data['timestamp'] = time.time() - self.endpoints[endpoint_index]['start_time']
          events.append(encode_as_wire_message(data))

    return events

  def get_endpoint_names(self):
    return {k:v['endpoint_name'] for k,v in self.endpoints.items()}

#TODO: Get this constant in the class
class RequestHandler(BaseHTTPRequestHandler):
  def authorizeish(self):
    # Eventually, I'll want to hide the secret in headers..
    self.parsed_url = urlparse(self.path)
    self.query_params = parse_qs(self.parsed_url.query)

    #TODO: get rid of early exit:
    return True

    if ('secret' not in self.query_params or
        type(self.query_params['secret']) != list or
        int(self.query_params['secret'][0]) != secret):
      return False
    return True

  def add_misc_headers(self, content_type):
    self.send_header('Content-type', content_type)
    self.send_header('Cache-Control', 'no-cache')
    self.send_header('Connection', 'keep-alive')
    self.send_header('Access-Control-Allow-Credentials', 'true')
    self.send_header('Access-Control-Allow-Origin', '*')

  def serve_index(self):
    self.send_response(200)
    self.add_misc_headers('text/html')
    self.end_headers()

    # TODO: Better (django-like?) interpolation? 
    # TODO: I can't use .format w/ index because it freaks out every time it
    # sees a {, which javascript and css kick in all the time. I don't want to
    # have to use \{ every time.....
    rows = ''
    for row_id in range(5):
      rows += row_def.format(y=row_id)
    hydrated_index = index.replace('SECRET', str(secret))
    hydrated_index = hydrated_index.replace('ROWS', rows)
    self.wfile.write(bytes(hydrated_index, 'utf8'))

  def send_endpoint_update(self):
    data = {}
    data['msg_type'] = 'endpoints'
    data['endpoints'] = ping_manager.get_endpoint_names()
    print('Sending endpoint update: ', data)
    self.wfile.write(encode_as_wire_message(data))

  def serve_stream(self):
    self.send_response(200)
    self.add_misc_headers('text/event-stream')
    self.end_headers()

    print('Beginning to serve stream...')
    #TODO: There is a problem here. If serve_stream has two callers, each caller
    #      only gets half the data. 

    self.send_endpoint_update();

    while(True):
      for event in ping_manager.get_events():
        self.wfile.write(event)
        self.wfile.flush()

  def do_GET(self):
    if('favicon.ico' in self.path):
      #Can I reject the request silently, w/o response?
      return

    if(not self.authorizeish()):
      #TODO: More info. Maybe even dump to a log?
      print('failed to authorize:' + self.path)
      raise PermissionError('Auth failure. TODO: more info in this message.')

    if(self.parsed_url.path == '/'):
      self.serve_index()
    else:
      self.serve_stream()

def run(server_class=ThreadingHTTPServer, handler_class=RequestHandler):
  #TODO: allow the port number to be dynamically assigned.
  server_address = ('', 8000) # serve on all interfaces, port 8000
  httpd = server_class(server_address, handler_class)
  t = Thread(target=start_browser)
  t.run()
  print('starting httpd...')
  httpd.serve_forever()

ping_manager = PingManager(cl_args.endpoints);

run()
print('after run')
